group 'org.ligson'
version '1.0-SNAPSHOT'

apply plugin: 'application'
mainClassName = "org.ligson.se.dubbo.main.DubboMain"
applicationDefaultJvmArgs = ["-Dgreeting.language=zh"]
ext {
    springVersion = "4.2.4.RELEASE"
    aspectjVersion = "1.8.8"
    mybatisVersion = "3.2.8"
    mybatisSpringVersion = "1.2.1"
    mysqlVersion = "5.1.29"
    druidVersion = "1.0.0"
    springBootVersion = "1.3.2.RELEASE"
    dubboVersion = "2.5.3"
    zkclientVersion = "0.4"
}

dependencies {
    compile project(':se_api')
    compile project(':fw_core')

    //spring依赖
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.aspectj:aspectjrt:${aspectjVersion}"
    testCompile "org.springframework:spring-test:${springVersion}"

    compile "org.aspectj:aspectjweaver:${aspectjVersion}"

    //mybatis
    compile "org.mybatis:mybatis:${mybatisVersion}"
    compile "org.mybatis:mybatis-spring:${mybatisSpringVersion}"

    //mysql driver
    compile "mysql:mysql-connector-java:${mysqlVersion}"

    //druid
    compile "com.alibaba:druid:${druidVersion}"

    //spring-boot
    compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"

    //dubbo
    compile "com.alibaba:dubbo:${dubboVersion}"
    compile "com.101tec:zkclient:${zkclientVersion}"

}

//排除resources文件
jar {
    exclude '**/*.properties', '**/*.xml', '**/*.vm', '**/*.txt', "**/META-INF/spring/**", "**/META-INF/mybatis/**"
}

//默认编译时文件编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task copyConf {
    doLast {
        copy {
            from sourceSets.main.resources.srcDirs
            into "${buildDir}/conf"
        }
    }

}

//自定义zip目录
installDist {
    doLast {
        copy {
            from "${buildDir}/conf"
            into "${buildDir}/install/${project.name}/conf"
        }
    }
}

applicationDistribution.from(copyConf) {
    into ""
}

//自定义启动脚本
startScripts {
    doLast {
        delete("${buildDir}/scripts/${project.name}")
        delete("${buildDir}/scripts/${project.name}.bat")
        copy {
            from "${projectDir}/src/main/bin"
            into "${buildDir}/scripts"
        }
    }
}

//打包之前先执行installDist
distTar {
    doFirst {
        installDist.execute()
    }
}
distZip {
    doFirst {
        installDist.execute()
    }
}

distributions {
    main {
        contents {
            from { "${buildDir}/install/${project.name}" }
        }
    }
}

